***
*** Ambient calculus (type system, implementation 2)
***
*** Source: Typed Mobile Ambients in Maude
***	    Fernando Rosa-Velardo, Clara Segura, and Alberto Verdejo
***	    http://maude.ucm.es/ambients/
***

in ambients-types.maude

mod TYPE-SYSTEM2 is

	including ENVIRONMENTS .
	including TYPES .
	including AC-TYPED-SYNTAX .

	sort JudgeP .
	op _|-_ : Env Process -> JudgeP .

	sort JudgeM .
	op _|-_ : Env OutputSeq -> JudgeM . 

	subsort TMType < JudgeM . 
	subsort EType < JudgeP .

	var E : Env .
	var a : Acid .
	var n : Qidn .
	var M1 M2 M : Message .
	var O : OutputSeq .
	var P Q  : Process .
	var S T : EType .
	var W : MType .
	var TW TW1 TW2 : TMType .
	var I : InputSeq .


	op errType : -> EType .

	op _`[`]_ : EType EType -> EType [comm].

	eq  Shh [] T = T .
	eq T [] T = T .
	ceq T [] S = errType if T =/= S .
	eq errType [] T = errType .

	rl [Exp] : E |- a => E [ a ] .

	crl [Tup] : E |- M,O => W x TW if E |- M => W /\ E |- O => TW . 

	rl [Empty] : E |- eps => Cap [ Shh ] .


	crl [Path] : E |- M1 . M2 => Cap [ T [] S ] if  E |- M1 => Cap [ T ]  /\  E |- M2 => Cap [ S ]  .

	crl [In] : E |- in [ M ] => Cap [ Shh ] if E |- M => Amb [ T ] . 

	crl [Out] : E |- out [ M ] => Cap [ Shh ] if E |- M => Amb [ T ] .

	crl [OpenShh] : E |- open[ M ] => Cap [ Shh ] if E |- M => Amb [ Shh ] .

	***crl [open] : E |- open [ M ] => Cap [ T ]  if E |- M => Amb [ T ] .

	crl [Open] : E |- open [ M ] => Cap [ TW ]  if E |- M => Amb [ TW ] .


	rl [Zero] : E |- stop => Shh .

	crl [Par] : E |- P | Q => T [] S if P =/= stop /\ Q =/= stop /\ E |- P => T /\ E |- Q => S .

	crl [Repl] : E |- ! P => T if E |- P => T .

	crl [Prefix] : E |- M . P => T [] S if E |- M => Cap[ T ] /\ E |- P => S .

	crl [Amb] : E |- M [ P ] => Shh if E |- M => Amb [ T ] /\ E |- P => S /\ T [] S = T .

	crl [Output] : E |- < O > => TW if E |- O => TW . 

	crl [Res] : E |- new [ n : Amb [ S ] ] P => T if E [ n -> Amb [ S ] ] |- P => T .

	crl [Input] : E |- ( I ) P => T if E [ I ] |- P => S /\ T := typeI( I ) /\ S [] T = T .

	var IS : InputSeq .
	var x : Qidx .
	op typeI : InputSeq -> TMType .

	eq typeI ( x : T ) = T .

	eq typeI ( ( x : T ) , IS ) = T x typeI ( IS ) .   

endm

mod EXAMPLES-TYPES is

	including TYPE-SYSTEM2 .

	op E : -> Env .
	op firewall : -> Process .

	eq firewall = new ['k : Amb[Shh]] ('n{0} [  open['k{0}] . stop ] | new['m : Amb[Shh]] ('m{0} [ 'k{0} [ out['m{0}] . in['n{0}] . in['m{0}] . stop  ] | stop ])) .

	eq E = ( 'n{0} , Amb [ Shh ] ) .

	op fail : -> Process .
	eq fail = (('x : Amb[Shh] ) ( 'x[ stop ] ) ) | < 'n > | (('y : Cap[Shh]) ('y . stop) ) | 
	    < open['n] > .

endm

eof

rew E |- firewall .

rew E |- dec(fail) .
