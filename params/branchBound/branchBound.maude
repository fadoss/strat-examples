***
*** Parametric Branch and bound algorithm.
***
*** This version requires an expand strategy that undeterminiscally generate
*** all successors from a partial solution. All possible successors are
*** gathered using the metalevel to make the algorithm deterministic.
***

fth BB-PROBLEM-BASE is
	protecting BOOL .
	including STRICT-TOTAL-ORDER * (sort Elt to Value) .

	*** Partial results
	sort PartialResult .

	*** Fixed data
	sort FixData PRList .
	subsort PartialResult < PRList .

	op none : -> PRList .
	op __ : PRList PRList -> PRList [assoc ctor id: none] .


	*** Estimate the expected cost
	op getBound : PartialResult FixData -> Value .

	*** Get value or cost for a complete Result
	op getValue : PartialResult FixData -> Value .

	*** Is it a solution?
	op result? : PartialResult FixData -> Bool .
endfth

view PartialResult from TRIV to BB-PROBLEM-BASE is
	sort Elt to PartialResult .
endv

sth BB-PROBLEM is
	including BB-PROBLEM-BASE .

	*** The succesors of a partial solution
	*** (it receives an upper bound when it is already known)
	strat expand : FixData @ PartialResult .
	strat expand : FixData Value @ PartialResult .
endsth


***
***	Execution
***

fmod PQUEUE{ P :: BB-PROBLEM-BASE } is
	vars PQ         : PQueue .
	vars V V'       : P$Value .
	var  PL         : P$PRList .
	vars PR PR1 PR2 : P$PartialResult .
	var  FD         : P$FixData .
	var  P          : QPair .

	sort PQueue QPair .
	subsort QPair < PQueue .

	op pair : P$PartialResult P$Value -> QPair .

	op mtPQueue : -> PQueue .
	op _._ : PQueue PQueue -> PQueue [assoc id: mtPQueue] .

	op insert : P$PRList PQueue P$FixData -> PQueue .
	op insert* : QPair PQueue -> PQueue .

	eq insert(none, PQ, FD) = PQ .
	eq insert(PR PL, PQ, FD) =
		insert*(pair(PR, getBound(PR, FD)), insert(PL, PQ, FD)) .

	eq insert*(P, mtPQueue) = P .
	eq insert*(pair(PR1, V), pair(PR2, V') . PQ) =
		if (V < V') then pair(PR1, V) . pair(PR2, V') . PQ
		else pair(PR2, V') . insert*(pair(PR1, V), PQ)
		fi .
endfm

view Problem from BB-PROBLEM-BASE to BB-PROBLEM is
	*** identity
endv

mod BB-BASE{X :: BB-PROBLEM-BASE} is
	protecting PQUEUE{X} .
	protecting META-LEVEL .

	sort BBState .

	var  F      : X$FixData .
	var  Q      : PQueue .
	var  P      : X$PartialResult .
	vars R R'   : X$PartialResult .
	var  PL     : X$PRList .
	vars V E BK : X$Value .

	op initial : X$PartialResult X$FixData -> BBState [ctor] .
	op solution : X$PartialResult X$Value -> BBState [ctor] .
	op < fixData: _, queue: _, solution: _, itsValue: _ > : X$FixData PQueue X$PartialResult X$Value -> BBState [ctor] .
	op < fixData: _, queue: _ > : X$FixData PQueue -> BBState [ctor] .


	***
	*** Rules
	***

	rl [initial] : initial(P, F) =>
		< fixData: F, queue: insert(P, mtPQueue, F) > .

	*** Rules for queue expansion

	rl [pop] : < fixData: F, queue: pair(P, V) . Q > =>
		< fixData: F, queue: Q > .

	rl [pop] : < fixData: F, queue: pair(P, V) . Q, solution: R, itsValue: BK > =>
		< fixData: F, queue: Q, solution: R, itsValue: BK > .

	rl [expand-queue] : < fixData: F, queue: Q > =>
		< fixData: F, queue: insert(PL, Q, F) > [nonexec] .

	rl [expand-queue] : < fixData: F, queue: Q, solution: R, itsValue: BK > =>
		< fixData: F, queue: insert(PL, Q, F), solution: R, itsValue: BK > [nonexec] .

	crl [finish] : < fixData: F, queue: pair(P, V) . Q, solution: R, itsValue: BK > =>
		solution(R, BK) if not(V < BK) .
	rl [finish] : < fixData: F, queue: mtPQueue, solution: R, itsValue: BK > =>
		solution(R, BK) .

	crl [solution] : < fixData: F, queue: pair(R, V) . Q > =>
		< fixData: F, queue: Q, solution: R, itsValue: getValue(R, F) >
			if result?(R, F) .
	crl [solution] : < fixData: F, queue: pair(R', V) . Q, solution: R, itsValue: BK > =>
		 < fixData: F, queue: Q, solution: R', itsValue: V >
			if result?(R', F) /\ getValue(R', F) < BK .
	crl [solution] : < fixData: F, queue: pair(R', V) . Q, solution: R, itsValue: BK > =>
		< fixData: F, queue: Q, solution: R, itsValue: BK >
			if result?(R', F) /\ not(getValue(R', F) < BK) .
endm

smod BB-STRAT{X :: BB-PROBLEM} is
	protecting BB-BASE{Problem}{X} .
	protecting META-LEVEL .

	var  S    : BBState .
	var  P R  : X$PartialResult .
	vars V BK : X$Value .
	var  F    : X$FixData .
	vars Q Q' : PQueue .
	var  PL   : X$PRList .

	var N  : Nat .
	var M  : Module .
	var MT : Term .
	var MS : Strategy .
	var RP : ResultPair .

	strats solve border-step @ BBState .
	strats border-step : Module Term X$PartialResult Strategy Nat @ BBState .

	csd border-step(M, MT, P, MS, N) := expand-queue[PL <- downTerm(getTerm(RP), P)] ;
	                                    border-step(M, MT, P, MS, s(N))
	 if RP := metaSrewrite(M, MT, MS, breadthFirst, N) .

	csd border-step(M, MT, P, MS, N) := idle
	 if metaSrewrite(M, MT, MS, breadthFirst, N) = failure .

	sd border-step := matchrew S s.t. < fixData: F, queue: pair(P, V) . Q > := S by S using
			(pop[P <- P] ; border-step(upModule('MAIN, false), upTerm(P), P, 'expand[[upTerm(F)]], 0))
		| matchrew S s.t. < fixData: F, queue: pair(P, V) . Q, solution: R, itsValue: BK > := S by S using
			(pop[P <- P] ; border-step(upModule('MAIN, false), upTerm(P), P, 'expand[[upTerm(F), upTerm(BK)]], 0))
	.

	sd solve := initial ; (solution or-else border-step) * ; finish .
endsm
