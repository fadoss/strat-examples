***
*** Parametric Branch and bound algorithm.
***
*** In this version, instances are required to provide the number of successors
*** of each partial solution. The strategy expand takes a child index, so
*** that the algorithm can ask for all of them sequentially.
***

fth BB-PROBLEM-BASE is
	protecting BOOL .
	protecting NAT .
	including STRICT-TOTAL-ORDER * (sort Elt to Value) .

	*** Partial results
	sort PartialResult .

	*** Fixed data
	sort FixData .

	*** Estimate the expected cost
	op getBound : PartialResult FixData -> Value .

	*** Get value or cost for a complete Result
	op getValue : PartialResult FixData -> Value .

	*** Is it a solution?
	op result? : PartialResult FixData -> Bool .

	*** A infinity (or initial bound for the problem)
	op infinity : FixData -> Value .

	*** Number of sucessors
	op numChildren : PartialResult FixData -> Nat .
endfth

view PartialResult from TRIV to BB-PROBLEM-BASE is
	sort Elt to PartialResult .
endv

sth BB-PROBLEM is
	including BB-PROBLEM-BASE .

	*** Generates the successors of a partial result.
	***
	*** This strategy will be called from 0 until numChildren of the
	*** current partial result. Expand should be deterministic but it
	*** is allowed to fail.
	strat expand : Nat FixData Value @ PartialResult .
endsth

***
*** Execution
***

fmod PQUEUE{ P :: BB-PROBLEM-BASE } is
	vars PQ         : PQueue .
	vars V V'       : P$Value .
	var  PL         : P$PartialResult .
	vars PR PR1 PR2 : P$PartialResult .
	var  FD         : P$FixData .
	var  P          : QPair .

	sort PQueue QPair .
	subsort QPair < PQueue .

	op pair : P$PartialResult P$Value -> QPair .

	op mtPQueue : -> PQueue .
	op _._ : PQueue PQueue -> PQueue [assoc id: mtPQueue] .

	op insert : P$PartialResult PQueue P$FixData -> PQueue .
	op insert* : QPair PQueue -> PQueue .

	eq insert(PR, PQ, FD) =
		insert*(pair(PR, getBound(PR, FD)), PQ) .

	eq insert*(P, mtPQueue) = P .
	eq insert*(pair(PR1, V), pair(PR2, V') . PQ) =
		if (V < V') then pair(PR1, V) . pair(PR2, V') . PQ
		else pair(PR2, V') . insert*(pair(PR1, V), PQ)
		fi .
endfm

view Problem from BB-PROBLEM-BASE to BB-PROBLEM is
	*** identity
endv

mod BB-BASE{X :: BB-PROBLEM-BASE} is
	protecting PQUEUE{X} .

	sort BBState .

	var  F      : X$FixData .
	var  Q      : PQueue .
	var  P      : X$PartialResult .
	vars R R'   : X$PartialResult .
	var  PL     : X$PartialResult .
	vars V E BK : X$Value .

	op initial : X$PartialResult X$FixData -> BBState [ctor] .
	op solution : X$PartialResult X$Value -> BBState [ctor] .
	op < fixData: _, queue: _, solution: _, itsValue: _ > : X$FixData PQueue X$PartialResult X$Value -> BBState [ctor] .
	op < fixData: _, queue: _ > : X$FixData PQueue -> BBState [ctor] .

	***
	*** Accessors
	***

	op fixData : BBState -> X$FixData .
	eq fixData(initial(P, F)) = F .
	eq fixData(< fixData: F, queue: Q >) = F .
	eq fixData(< fixData: F, queue: Q, solution: R, itsValue: BK >) = F .

	op upperBound : BBState -> X$Value .
	eq upperBound(< fixData: F, queue: Q, solution: R, itsValue: BK >) = BK .
	eq upperBound(S:BBState) = infinity(fixData(S:BBState)) [owise] .

	op top : BBState -> X$PartialResult .
	eq top(initial(P, F)) = P .
	eq top(< fixData: F, queue: pair(P, V) . Q >) = P .
	eq top(< fixData: F, queue: pair(P, V) . Q, solution: R, itsValue: BK >) = P .


	***
	*** Rules
	***

	rl [initial] : initial(P, F) =>
		< fixData: F, queue: insert(P, mtPQueue, F) > .

	rl [pop] : < fixData: F, queue: pair(P, V) . Q > =>
		< fixData: F, queue: Q > .

	rl [pop] : < fixData: F, queue: pair(P, V) . Q, solution: R, itsValue: BK > =>
		< fixData: F, queue:  Q, solution: R, itsValue: BK > .

	crl [border] : < fixData: F, queue: Q > =>
		< fixData: F, queue: insert(PL, Q, F) >
			if P => PL [nonexec] .
	crl [border] : < fixData: F, queue: Q, solution: R, itsValue: BK > =>
		< fixData: F, queue: insert(PL, Q, F), solution: R, itsValue: BK >
			if P => PL /\ V < BK [nonexec] .

	crl [finish] : < fixData: F, queue: pair(P, V) . Q, solution: R, itsValue: BK > =>
		solution(R, BK) if not(V < BK) .
	rl [finish] : < fixData: F, queue: mtPQueue, solution: R, itsValue: BK > =>
		solution(R, BK) .

	crl [solution] : < fixData: F, queue: pair(R, V) . Q > =>
		< fixData: F, queue: Q, solution: R, itsValue: getValue(R, F) >
			if result?(R, F) .
	crl [solution] : < fixData: F, queue: pair(R', V) . Q, solution: R, itsValue: BK > =>
		 < fixData: F, queue: Q, solution: R', itsValue: V >
			if result?(R', F) /\ getValue(R', F) < BK .
	crl [solution] : < fixData: F, queue: pair(R', V) . Q, solution: R, itsValue: BK > =>
		< fixData: F, queue: Q, solution: R, itsValue: BK >
			if result?(R', F) /\ not(getValue(R', F) < BK) .
endm

smod BB-STRAT{X :: BB-PROBLEM} is
	protecting BB-BASE{Problem}{X} .

	var  S   : BBState .
	var  F   : X$FixData .
	var  V   : X$Value .
	var  P   : X$PartialResult .
	vars N M : Nat .

	strat solve iteration @ BBState .

	strat iterChildren : Nat X$PartialResult X$FixData X$Value @ BBState .

	sd iterChildren(s(N), P, F, V) := try(border[P <- P]{expand(s(N), F, V)}) ; iterChildren(N, P, F, V) .
	sd iterChildren(0, P, F, V) := try(border[P <- P]{expand(0, F, V)}) .

	sd iteration := matchrew S s.t. M := numChildren(top(S), fixData(S))
			/\ M > 0
			by S using (pop ; iterChildren(sd(M, 1), top(S), fixData(S), upperBound(S))) .


	sd solve := initial ; (solution or-else iteration) * ; finish .
endsm
