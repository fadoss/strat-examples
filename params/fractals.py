#!/usr/bin/env python3
#
# Fractals drawing program using Cairo
#
# This program draws a basic shape (line, square, triangle) in every position
# in the Maude term, which is read from standard input or through the maude
# library.
#

import argparse
import sys
import cairo


# Parse a string as a segment of the fractal (use -no-wrap when calling Maude)
def parse_line(line):
	return [float(x) for x in line.replace('(', '').replace(')', '')
			.replace('>', '').replace(',', '').split()]


# Parse the whole fractal in text form returning the segment values
def parse_text_input(stream):
	for line in stream:
		yield parse_line(line)


# Decompose the segment of the fractal using the Maude library
def parse_term_line(term):
	coord_list = []

	for ends in term.arguments():
		coord_list.extend([float(x) for x in ends.arguments()])

	return coord_list


# Decompose the whole fractal using the Maude library
def parse_term_input(term):
	lines = []
	symbol_name = str(term.symbol())

	# It is a list of segments
	if symbol_name == '__':
		return (parse_term_line(line) for line in term.arguments())

	# It is a single segment
	elif symbol_name == '_>>_':
		return [ parse_term_line(term) ]

	else:
		raise ValueError('unexpected content in the fractal term')

def draw_line(x0, y0, x, y):
	context.move_to(x0, y0)
	context.line_to(x, y)
	context.stroke()


def draw_rect(x0, y0, x, y):
	context.rectangle(x0, y0, x - x0, x - x0)
	context.fill()


def draw_triangle(x0, y0, x, y):
	h = 3 ** .5 / 2

	context.move_to(x0, y0)
	context.line_to(x, y)
	context.line_to(x0 + (x - x0) * .5 + (y0 - y) * h,
			y0 + (y - y0) * .5 + (x - x0) * h)
	context.line_to(x0, y0)
	context.fill()


draw_funcs = {
	'l': draw_line,
	's': draw_rect,
	't': draw_triangle
}


if __name__ == "__main__":

	# Command-line arguments
	parser = argparse.ArgumentParser(description='Utility for drawing fractals generated by Maude')
	parser.add_argument('shape', help='Basic shape, either l (line), t (triangle) or s (square)', choices=['l', 't', 's'])
	parser.add_argument('fractal', help='Name of the fractal (a view name) (Sierpinski, VonKoch, CantorDust)', nargs='?')
	parser.add_argument('--times', '-n', help='Number of expansions.', type=int, default=4)

	args = parser.parse_args()

	# The fractal argument trigger the evaluation of the fractal from
	# this script, for which the maude library is required
	if args.fractal is not None:
		try:
			import maude

		except ImportError:
			print('Giving the name of the fractal implies using the maude library '
			      'to compute it, but it does not seem to be available.\nIt can be '
			      'installed with «pip install maude». Otherwise, the fractal term '
			      'can be copied here from Maude.')
			maude = None

	else:
		maude = None

	# Compute the fractal with Maude
	if maude is not None:
		maude.init(advise=False)
		maude.load('fractals.maude')

		# Looks for the given fractal as view
		if maude.getView(args.fractal) is None:
			print(f'The given fractal «{args.fractal}» is not defined.')
			sys.exit(1)

		# Instantiate the fractal module with the given view
		maude.input(f'smod FRACTALS-TEMPORARY-MODULE is protecting FRACTALS-STRAT{{{args.fractal}}} . endsm')

		m = maude.getCurrentModule()
		t = m.parseTerm('(0.0, 0.0) >> (1.0, 0.0)')
		s = m.parseStrategy(f'expandTimes({args.times})')

		fractal, nrew = next(t.srewrite(s))
		print(f'Fractal expansion takes {nrew} rewrites.')
		fractal_source = parse_term_input(fractal)

	# Reads the fractal from the command line
	else:
		print('Write the Maude term for the fractal. Then type Ctrl+D.')
		fractal_source = parse_text_input(sys.stdin)

	surface = cairo.PDFSurface("drawing.pdf", 100, 100)
	context = cairo.Context(surface)
	context.set_line_width(0.002)
	context.set_line_cap(cairo.LINE_CAP_ROUND)
	context.scale(100, 100)

	# Provides an inner margin and the usual orientation
	context.transform(cairo.Matrix(0.98, 0, 0, -0.98, .01, .99))

	draw_function = draw_funcs.get(
		args.shape,
		draw_line
	)

	for x0, y0, x, y in fractal_source:
		draw_function(x0, y0, x, y)

	surface.finish()
