***
*** Simple REPL to test the language extensions
***

load slangExtension
load file

fmod SLANG-REPL-GRAMMAR is
	protecting QID-LIST .
	protecting NAT .

	sorts @Token@ @Bubble@ @NtBubble@ @UsingBubble@ @BoundPart@ @Command@ .

	op token : Qid -> @Token@ [special (
		id-hook Bubble (1 1)
		op-hook qidSymbol (<Qids> : ~> Qid))] .

	op bubble : QidList -> @Bubble@ [special (
		id-hook Bubble (1 -1)
		op-hook qidListSymbol (__ : QidList QidList ~> QidList)
		op-hook qidSymbol (<Qids> : ~> Qid)
		id-hook Exclude (.))] .

	op ntBubble : QidList -> @NtBubble@ [special (
		id-hook Bubble (2 -1)
		op-hook qidListSymbol (__ : QidList QidList ~> QidList)
		op-hook qidSymbol (<Qids> : ~> Qid)
		id-hook Exclude (.))] .

	op usingBubble : QidList -> @UsingBubble@ [special (
		id-hook Bubble (1 -1)
		op-hook qidListSymbol (__ : QidList QidList ~> QidList)
		op-hook qidSymbol (<Qids> : ~> Qid)
		id-hook Exclude (using))] .

	*** Select a module by its name
	op select_. : @Token@ -> @Command@ [ctor] .

	*** Select a module by meta-representation
	op select_. : @NtBubble@ -> @Command@ [ctor] .

	*** Strategy rewrite command
	op srew_using_. : @UsingBubble@ @Bubble@ -> @Command@ [ctor] .

	*** Optional bound of the srew command
	op [_]_ : Nat @Bubble@ -> @BoundPart@ [ctor] .

endfm

mod SLANG-REPL{X :: SLANG-EXTENSION} is
	extending CONFIGURATION .
	protecting STD-STREAM .
	protecting META-LEVEL .
	protecting LEXICAL .
	protecting CONVERSION .
	protecting SMOD-PARSE{X} .

	***
	*** SlangREPL is in charge of reading the user commands (using the
	*** standard stream objects) and execute them.
	***
	*** Typically, a single instance will exist. Its attributes are the
	*** subject module selected by the user, and its associated meta-level
	*** extension and strategy language grammar. These are initially empty.
	*** Some functions are defined to access and modify them.

	op SlangREPL : -> Cid [ctor] .
	op repl      : -> Oid [ctor] .

	op targetModule:_  : Module? -> Attribute [ctor gather (&)] .
	op instedExt:_     : Module?  -> Attribute [ctor gather (&)] .
	op instedGrammar:_ : Module? -> Attribute [ctor gather (&)] .

	sort Module? .
	subsort Module < Module? .
	op notLoaded : -> Module? [ctor] .

	op getTargetModule : Object -> Module? .
	eq getTargetModule(< O : SlangREPL | targetModule: M?, Attrs >) = M? .
	eq getTargetModule(Obj) = notLoaded [owise] .

	op getExtensionModule : Object -> Module? .
	eq getExtensionModule(< O : SlangREPL | instedExt: M?, Attrs >) = M? .
	eq getExtensionModule(Obj) = notLoaded [owise] .

	op getInstedGrammar : Object -> Module? .
	eq getInstedGrammar(< O : SlangREPL | instedGrammar: M?, Attrs >) = M? .
	eq getInstedGrammar(Obj) = notLoaded [owise] .

	op clearTargetModules : AttributeSet -> AttributeSet .
	eq clearTargetModules(targetModule: M?, Attrs) = clearTargetModules(Attrs) .
	eq clearTargetModules(instedExt: M?, Attrs) = clearTargetModules(Attrs) .
	eq clearTargetModules(instedGrammar: M?, Attrs) = clearTargetModules(Attrs) .
	eq clearTargetModules(Attrs) = Attrs [owise] .

	*** Setting the target module, involves instantiating its grammar.
	op setTargetModule : Object Module -> Object .
	eq setTargetModule(< O : SlangREPL | Attrs >, M) =
		< O : SlangREPL | targetModule: M,
		                  instedExt: makeMetaSlang(M),
		                  instedGrammar: makeSlangGrammar(M),
		                  clearTargetModules(Attrs) > .


	***
	*** SRewriter executes strategy rewriting tasks, showing their results.
	*** A task is given by the extension module, the target module, and a
	*** pre-built term list containing the target module, a strategy and a
	*** term, ready to call metaSRewrite. The number of already shown and
	*** required solutions are also part of the task.

	op SRewriter : -> Cid [ctor] .
	op srewer    : -> Oid [ctor] .

	sort RewriterTask .
	op srewTask : Module Module TermList Nat Nat -> RewriterTask [ctor] .

	op task:_ : RewriterTask -> Attribute [ctor gather (&)] .

	op runTask : RewriterTask -> ResultPair? .
	ceq runTask(srewTask(M, TM, TL, K, N)) = downTerm(T, (failure).ResultPair?)
	 if T := getTerm(metaReduce(M, 'metaSrewriteEx[TL, upTerm(K)])) .

	***
	*** Inits the REPL

	op initREPL : Oid -> Msg [msg] .

	var  Attrs         : AttributeSet .
	var  Obj           : Object .
	var  O             : Oid .
	var  C             : Cid .
	vars GM M TM       : Module .
	var  M?            : Module? .
	vars Q Q1 Q2       : Qid .
	var  QL            : QidList .
	var  KQL           : [QidList] .
	var  Input         : String .
	vars T T1 T2 T3 MT : Term .
	vars KT1 KT2       : [Term] .
	var  TL            : TermList .
	var  N K           : Nat .
	var  St            : Strategy .
	var  RP?           : ResultPair? .


	***
	*** Rules for the REPL

	rl [greeting] :
		< repl : SlangREPL | Attrs > initREPL(repl)
	=>
		< repl : SlangREPL | Attrs >
		write(stdout, repl, greetingText) .


	rl [prompt] :
		< repl : SlangREPL | Attrs > wrote(repl, stdout)
	=>
		< repl : SlangREPL | Attrs >
		getLine(stdin, repl, "SLExt> ") .

	rl [gotCommand] :
		< repl : SlangREPL | Attrs > gotLine(repl, stdin, Input)
	=>
		processInput(< repl : SlangREPL | Attrs >, Input) .

	***
	*** Rules for SRewriter

	crl [firstSolution] :
		< O : SRewriter | task: srewTask(M, TM, TL, 0, N) >
	=>
		if RP? == failure then
			write(stdout, repl, "No solutions.\n")
		else
			< O : SRewriter | task: srewTask(M, TM, TL, 1, N) >
			write(stdout, O, "Solution 1: \t" + printTokens(KQL) + "\n")
		fi
	if RP? := runTask(srewTask(M, TM, TL, 0, N))
	/\ KQL := metaPrettyPrint(TM, getTerm(RP?)) .

	rl [noMoreRequested] :
		< O : SRewriter | task: srewTask(M, TM, TL, s(N), s(N)) >
		wrote(O, stdout)
	=>
		write(stdout, repl, "No more solutions requested.\n") .

	crl [otherSolution] :
		< O : SRewriter | task: srewTask(M, TM, TL, N, K) >
		wrote(O, stdout)
	=>
		if RP? == failure then
			write(stdout, repl, "No more solutions.\n")
		else
			< O : SRewriter | task: srewTask(M, TM, TL, s(N), K) >
			write(stdout, O, "Solution " + string(s(N), 10) +  ": \t" + printTokens(KQL) + "\n")
		fi
	if (N < K or K == 0)
	/\ RP? := runTask(srewTask(M, TM, TL, N, K))
	/\ KQL := metaPrettyPrint(TM, getTerm(RP?)) .


	***
	*** Input processing (defined equationally)

	op processInput : Object String -> Configuration .
	op processInput : Object QidList -> Configuration .

	eq processInput(Obj, "") = clearAttrs(Obj) .	*** End of file (Ctrl+D)
	eq processInput(Obj, "\n") = Obj wrote(repl, stdout) .
	eq processInput(Obj, Input) = processInput(Obj, tokenize(Input)) [owise] .

	eq processInput(Obj, 'quit QL) = clearAttrs(Obj) .
	eq processInput(Obj, 'help QL) = Obj write(stdout, repl, helpText) .
	ceq processInput(Obj, 'srew QL) = Obj write(stdout, repl, "No target module loaded.\n")
	 if getTargetModule(Obj) = notLoaded .
	eq processInput(Obj, 'smod QL) = processModule(Obj, 'smod QL) .
	ceq processInput(Obj, QL) = processCommand(Obj, T)
	 if T := getTerm(metaParse(upModule('SLANG-REPL-GRAMMAR, false), QL, '@Command@)) .
	eq processInput(Obj, QL) = Obj write(stdout, repl, "Unknown command.\n") [owise] .

	*** Process a command when its surface has already been parsed
	op processCommand : Object Term -> Configuration .

	ceq processCommand(Obj, 'select_.['token[T]]) =
		if upModule(Q, true) :: Module then
			setTargetModule(Obj, upModule(Q, true))
			write(stdout, repl, moduleLoaded(Q))
		else
			Obj
			write(stdout, repl, printTokens('No 'module '\r Q '\o 'is 'available. '\n))
		fi
	 if Q := downTerm(T, 'UNKNOWN) .

	ceq processCommand(Obj, 'select_.['ntBubble[T]]) =
		setTargetModule(Obj, downTerm(T1, upModule('NAT, false)))
		write(stdout, repl, moduleLoaded(getName(downTerm(T1, upModule('NAT, false)))))
	 if T1 := getTerm(metaParse(upModule('META-LEVEL, false), downTerm(T, (nil).QidList), 'Module)) .
	eq processCommand(Obj, 'select_.['ntBubble[T]]) = Obj
		write(stdout, repl, "This does not seem to be the meta-representation of a module.\n") .


	ceq processCommand(Obj, 'srew_using_.['usingBubble[T1], 'bubble[T2]]) =
		processSRew(Obj, downTerm(T, 0), MT, downTerm(T2, (nil).QidList))
	 if '`[_`]_[T, 'bubble[T3]] := getTerm(metaParse(upModule('SLANG-REPL-GRAMMAR, false),
	                                       downTerm(T1, (nil).QidList), '@BoundPart@))
	 /\ MT := getTerm(metaParse(getTargetModule(Obj), downTerm(T3, (nil).QidList), anyType)) .

	ceq processCommand(Obj, 'srew_using_.['usingBubble[T1], 'bubble[T2]]) =
		processSRew(Obj, 0, MT, downTerm(T2, (nil).QidList))
	 if MT := getTerm(metaParse(getTargetModule(Obj), downTerm(T1, (nil).QidList), anyType)) [print] .

	eq processCommand(Obj, 'srew_using_.['usingBubble[T1], 'bubble[T2]]) =
		Obj write(stdout, repl, "No parse for the initial term.\n") [owise] .

	eq processCommand(Obj, T) = Obj write(stdout, repl, "This should not have been shown.\n") [owise] .

	*** Process a module insertion
	op processModule : Object QidList -> Configuration .

	ceq processModule(Obj, QL) =
		 setTargetModule(Obj, flatModule(M))
		 write(stdout, repl, moduleLoaded(getName(M)))
	 if M := parseModule(QL) .

	eq processModule(Obj, QL) = Obj write(stdout, repl, "The given extended strategy module cannot be parsed.\n") .

	*** Process the srew command specifically
	op processSRew : Object Nat Term QidList -> Configuration .

	ceq processSRew(Obj, N, T, QL) =
		if KT1 :: Term then
			if KT2 :: Term then
				Obj
				< srewer : SRewriter | task: srewTask(getExtensionModule(Obj),
					getTargetModule(Obj),
					(upTerm(getTargetModule(Obj)), upTerm(T), KT2, 'breadthFirst.SrewriteOption), 0, N) >
			else
				Obj write(stdout, repl, "No parse for strategy expression (stratParse).\n")
			fi

		else 
			Obj write(stdout, repl, "No parse for strategy expression (grammar).\n")
		fi
	if KT1 := getTerm(metaParse(getInstedGrammar(Obj), QL, '@Strategy@))
	/\ KT2 := getTerm(metaReduce(getExtensionModule(Obj), 'stratParse[upTerm(getInstedGrammar(Obj)), upTerm(KT1)])) .


	***
	*** Auxiliary functions and resources

	*** Clear all of the attributes of an object
	*** It is used to clean the meta-modules when the session has
	*** terminated, since otherwise a lot of text will be shown.
	op clearAttrs : Object -> Object .
	eq clearAttrs(< O : C | Attrs >) = < O : C | none > .

	*** String shown by the REPL
	ops helpText greetingText : -> String .
	op moduleLoaded : Qid -> String .

	eq helpText = printTokens('Available 'commands: '\n
		'\s '\s '\! 'select '\o '<modulename|meta-module> '\! '. '\o '\n
		'\s '\s '\t 'Selects 'the 'target 'module. '\n
		'\s '\s '\! 'srew '\o '<term> '\! 'using '\o '<strategyExpr> '\! '. '\o '\n
		'\s '\s '\t 'Rewrites 'a 'given 'term 'using 'a 'given 'strategy 'expression. '\n
	) .

	eq greetingText = printTokens(
		'\n '\t '\t '\! '** 'Strategy 'language 'extensions 'playground '** '\o '\n '\n
	) .

	eq moduleLoaded(Q1) = printTokens(
		'Module '\b Q1 '\o 'is 'now 'the 'current 'module. '\n
	) .
endm

mod SLANG-REPL-TRIVIAL is
	protecting SLANG-REPL{SlangAsIs} .
	protecting SMOD-PARSE{SlangAsIs} .
endm

eof

set print attribute on .
set print conceal on .
print conceal smod_is_sorts_._______endsm .
erew <> < repl : SlangREPL | none > initREPL(repl) .
